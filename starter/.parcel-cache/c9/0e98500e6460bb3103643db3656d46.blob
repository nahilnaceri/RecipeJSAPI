"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _icons = _interopRequireDefault(require("url:../../img/icons.svg"));

var _regeneratorRuntime = require("regenerator-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class RecipeView {
  constructor() {
    _defineProperty(this, "_parentElement", document.querySelector('.recipe'));

    _defineProperty(this, "_data", void 0);

    _defineProperty(this, "_errorMessage", `Could not find recipe`);

    _defineProperty(this, "_successMessage", '');
  }

  render(data) {
    this._data = data;

    this._clear();

    console.log('not rendered');

    const markup = this._generateMarkup();

    this._parentElement.insertAdjacentHTML('beforeend', markup);

    console.log('rendered');
  }

  renderSpinner() {
    const markUp = `<div class="spinner">
    <svg>
      <use href="${_icons.default}#icon-loader"></use>
    </svg>
  </div>`;

    this._clear();

    this._parentElement.insertAdjacentHTML('beforeend', markUp);
  }

  renderError(message = this._errorMessage) {
    this._clear();

    const markUp = `<div class="error">
    <div>
      <svg>
        <use href="${_icons.default}#icon-alert-triangle"></use>
      </svg>
    </div>
    <p>${message}</p>
  </div> `;

    this._parentElement.insertAdjacentHTML('beforeend', markUp);
  }

  renderSuccessMessage(message = this._successMessage) {
    this._clear();

    const markUp = `<div class="message">
    <div>
      <svg>
        <use href="${_icons.default}#icon-smile"></use>
      </svg>
    </div>
    <p>${message}</p>
  </div> `;

    this._parentElement.insertAdjacentHTML('beforeend', markUp);
  }

  _clear() {
    this._parentElement.innerHTML = '';
  }

  _generateMarkup() {
    return `<figure class="recipe__fig">
    <img src="${this._data.image}" alt="Tomato" class="recipe__img" />
    <h1 class="recipe__title">
      <span>${this._data.title}</span>
    </h1>
  </figure>

  <div class="recipe__details">
    <div class="recipe__info">
      <svg class="recipe__info-icon">
        <use href="${_icons.default}#icon-clock"></use>
      </svg>
      <span class="recipe__info-data recipe__info-data--minutes">${this._data.cookingTime}</span>
      <span class="recipe__info-text">minutes</span>
    </div>
    <div class="recipe__info">
      <svg class="recipe__info-icon">
        <use href="${_icons.default}#icon-users"></use>
      </svg>
      <span class="recipe__info-data recipe__info-data--people">${this._data.servings}</span>
      <span class="recipe__info-text">servings</span>

      <div class="recipe__info-buttons">
        <button class="btn--tiny btn--increase-servings">
          <svg>
            <use href="${_icons.default}#icon-minus-circle"></use>
          </svg>
        </button>
        <button class="btn--tiny btn--increase-servings">
          <svg>
            <use href="${_icons.default}#icon-plus-circle"></use>
          </svg>
        </button>
      </div>
    </div>

    <div class="recipe__user-generated">
      <svg>
        <use href="${_icons.default}#icon-user"></use>
      </svg>
    </div>
    <button class="btn--round">
      <svg class="">
        <use href="${_icons.default}#icon-bookmark-fill"></use>
      </svg>
    </button>
  </div>

  <div class="recipe__ingredients">
    <h2 class="heading--2">Recipe ingredients</h2>
    <ul class="recipe__ingredient-list">
    ${this._data.ingredients.map(this._generateIngredient).join('')}
     
    </ul>
  </div>

  <div class="recipe__directions">
    <h2 class="heading--2">How to cook it</h2>
    <p class="recipe__directions-text">
      This recipe was carefully designed and tested by
      <span class="recipe__publisher">${this._data.publisher}</span>. Please check out
      directions at their website.
    </p>
    <a
      class="btn--small recipe__btn"
      href="${this._data.sourceUrl}"
      target="_blank"
    >
      <span>Directions</span>
      <svg class="search__icon">
        <use href="${_icons.default}#icon-arrow-right"></use>
      </svg>
    </a>
  </div>`;
  }

  _generateIngredient(ing) {
    return ` <li class="recipe__ingredient">
      <svg class="recipe__icon">
        <use href="${_icons.default}#icon-check"></use>
      </svg>
      <div class="recipe__quantity">${ing.quantity ?? ''}</div>
      <div class="recipe__description">
        <span class="recipe__unit">${ing.unit ?? ''}</span>
        ${ing.description}
      </div>
    </li>`;
  }

  addHandlerRender(meth) {
    ['hashchange', 'load'].forEach(el => window.addEventListener(el, meth));
  }

}

var _default = new RecipeView();

exports.default = _default;